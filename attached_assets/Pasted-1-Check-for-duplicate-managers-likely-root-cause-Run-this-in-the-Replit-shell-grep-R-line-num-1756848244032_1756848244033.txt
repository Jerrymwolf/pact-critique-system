1) Check for duplicate managers (likely root cause)
Run this in the Replit shell:
grep -R --line-number "WebSocketConnectionManager(" pact
grep -R --line-number -E "from .* import manager|manager = WebSocketConnectionManager" pact
If you see more than one instantiation of WebSocketConnectionManager(...), you’ve got two registries. The browser connected to A; the supervisor is broadcasting to B — so the UI never sees events.
Fix: make a single, shared manager
pact/websocket_manager.py
# pact/websocket_manager.py
import logging
from typing import Dict, Set
from fastapi import WebSocket

logger = logging.getLogger(__name__)

class WebSocketConnectionManager:
    def __init__(self):
        self.active: Dict[str, Set[WebSocket]] = {}

    async def connect(self, session_id: str, websocket: WebSocket):
        await websocket.accept()
        self.active.setdefault(session_id, set()).add(websocket)
        logger.info("WebSocket connected for session %s. Total connections: %d",
                    session_id, len(self.active.get(session_id, [])))

    def disconnect(self, session_id: str, websocket: WebSocket):
        group = self.active.get(session_id)
        if group and websocket in group:
            group.remove(websocket)
        logger.info("WebSocket disconnected for session %s", session_id)

    async def broadcast(self, session_id: str, message: dict):
        # Optionally log for debugging
        # logger.info("Broadcasting to %s: %s", session_id, message.get("event"))
        for ws in list(self.active.get(session_id, [])):
            try:
                await ws.send_json(message)
            except Exception:
                self.disconnect(session_id, ws)

# Create ONE singleton here
manager = WebSocketConnectionManager()
logger.info("WS manager singleton created id=%s", id(manager))
Then, everywhere else (API server routes, websocket endpoint, and supervisors), import this singleton:
# in pact/api_server.py, pact/supervisors/real_supervisor.py, mock_supervisor, etc.
from pact.websocket_manager import manager
Remove any local manager = WebSocketConnectionManager() defined in those files.
Sanity check: add a one-time log in both api_server and supervisor after importing:
logger.info("WS manager id (api_server)=%s", id(manager))
# and in real_supervisor:
logger.info("WS manager id (real_supervisor)=%s", id(manager))
When you run, both IDs must match.